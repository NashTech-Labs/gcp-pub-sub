package com.example.demo;

import com.google.api.core.ApiFuture;
import com.google.cloud.pubsub.v1.AckReplyConsumer;
import com.google.cloud.pubsub.v1.MessageReceiver;
import com.google.cloud.pubsub.v1.Publisher;
import com.google.cloud.pubsub.v1.Subscriber;
import com.google.protobuf.ByteString;
import com.google.pubsub.v1.ProjectSubscriptionName;
import com.google.pubsub.v1.PubsubMessage;
import com.google.pubsub.v1.TopicName;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

@RestController
@Slf4j
public class PubSubController {


    @Value("${pubsub.project-id}")
    private String projectId;

    @Value("${pubsub.topic-id}")
    private String topicId;

    @Value("${pubsub.subscription-id}")
    private String subscriptionId;

    @PostMapping("/publish")
    public ResponseEntity<String> publishMessage(@RequestBody String sampleJson) throws ExecutionException, InterruptedException, IOException {
        TopicName topicName = TopicName.of(projectId, topicId);
        Publisher publisher = null;
        try {
            publisher = Publisher.newBuilder(topicName).build();
            ByteString data = ByteString.copyFromUtf8(sampleJson);
            PubsubMessage pubsubMessage = PubsubMessage.newBuilder().setData(data).build();
            ApiFuture<String> message = publisher.publish(pubsubMessage);
            log.info("Message ID generated by pubsub {}", message.get());
            return new ResponseEntity<>("Message generated by Topic: " + message.get(), HttpStatus.OK);


        } finally {
            if (publisher != null) {
                publisher.shutdown();
                publisher.awaitTermination(1, TimeUnit.MINUTES);
            }
        }
    }


    @GetMapping("/subscribe")
    public ResponseEntity<String> receiveMessage() {
        ProjectSubscriptionName projectSubscriptionName = ProjectSubscriptionName.of(projectId, subscriptionId);

        MessagePubSub wrapper = new MessagePubSub();

        MessageReceiver messageReceiver = (PubsubMessage message, AckReplyConsumer consumer) -> {
            log.info("Message Id:" + message.getMessageId());
            wrapper.setMessage(message.getData().toStringUtf8());
            log.info("Message: {}", wrapper.getMessage());
            consumer.ack();
        };
        Subscriber subscriber = null;


        try {
            subscriber = Subscriber.newBuilder(projectSubscriptionName, messageReceiver).build();
            subscriber.startAsync().awaitRunning();
            subscriber.awaitTerminated(2, TimeUnit.SECONDS);
        } catch (TimeoutException e) {
            subscriber.stopAsync();
        }
        return new ResponseEntity<>(wrapper.getMessage(), HttpStatus.OK);
    }

}
